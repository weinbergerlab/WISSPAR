# Reference: https://www.exclamationlabs.com/blog/continuous-deployment-to-npm-using-gitlab-ci/

variables:
  REPO_NAME: gitlab.com/weinbergerlab/immunogenicity-data-project

# And to cache them as well.
cache:
  paths:
    - assets/node_modules/
    - assets/.yarn

# You specify the stages. Those are the steps that GitLab will go through
# Order matters.
stages:
  - test
  - build
  - production

format:
  image: golang:latest
  stage: test
  script:
    - mkdir -p $GOPATH/src/$(dirname $REPO_NAME)
    - ln -svf $CI_PROJECT_DIR $GOPATH/src/$REPO_NAME
    - cd $GOPATH/src/$REPO_NAME
    - go fmt $(go list ./... | grep -v /vendor/)
    - go vet $(go list ./... | grep -v /vendor/)
    - go test -race $(go list ./... | grep -v /vendor/)

assets:
  stage: build
  image: node:9.4.0
  tags:
    - node
  before_script:
    - apt-get update -qq && apt-get install
    - cd assets
    - yarn config set cache-folder .yarn
    - yarn install
  script:
    - npm run build

compile:
  image: golang:latest
  stage: build
  script:
    - cd $GOPATH/src/$REPO_NAME
    - go build -race -ldflags "-extldflags '-static'" -o $CI_PROJECT_DIR/mybinary
  artifacts:
    paths:
      - mybinary
